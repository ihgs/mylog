{"version":3,"sources":["Work.tsx","Storage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Work","_start","_end","_comment","obj","start","this","end","comment","worksKey","currentKey","Storage","works","localStorage","JSON","parse","getItem","forEach","work","push","setItem","stringify","current","removeItem","App","useState","setWork","setWorks","status","setStatus","errorMsg","setErrorMsg","useEffect","ws","getWorks","cu","getCurrent","clone","Date","getTime","length","newWorks","saveWorks","clearCurrent","endStart","newWork","formatTime","timestamp","moment","format","className","Container","Row","Alert","variant","Button","onClick","Form","Control","onChange","e","target","value","saveCurrent","list","w","index","Math","round","splice","removeRow","Table","striped","bordered","renderList","window","confirm","clear","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94af08f4.chunk.js","sourcesContent":["export default class Work {\n  private _start: number = -1;\n  private _end: number = -1; \n  private _comment: string = '';\n  \n  clone () {\n    const obj = new Work();\n    obj.start = this._start;\n    obj.end = this._end;\n    obj.comment = this._comment;\n    return obj;\n  }\n\n  get start (){\n    return this._start;\n  }\n\n  set start (_start) {\n    this._start = _start;\n  }\n\n  get end () {\n    return this._end;\n  }\n\n  set end(_end) {\n    this._end = _end;\n  }\n\n  get comment () {\n    return this._comment;\n  }\n\n  set comment (_comment) {\n    this._comment = _comment;\n  }\n}","import Work from './Work';\nconst worksKey = 'mylogDataWorks';\nconst currentKey = 'mylogDataCurrent';\nexport default class Storage {\n\n  static getWorks(): Work[] {\n    const works: Work[] = [];\n    if(worksKey in localStorage) {\n      JSON.parse(localStorage.getItem(worksKey) as string).forEach((obj: { _start: number; _end: number; _comment: string; })=>{\n        const work = new Work();\n        work.start = obj._start;\n        work.end = obj._end;\n        work.comment = obj._comment;\n        works.push(work);\n      });\n    }\n    return works;\n  }\n\n  static saveWorks(works:Work[]){\n    localStorage.setItem(worksKey, JSON.stringify(works));\n  }\n\n  static getCurrent(): Work {\n    const current = new Work();\n    if(currentKey in localStorage) {\n      const obj = JSON.parse(localStorage.getItem(currentKey) as string);\n      current.start = obj._start;\n      current.comment = obj._comment;\n    }\n    return current;\n  }\n\n  static saveCurrent(current:Work){\n    localStorage.setItem(currentKey,  JSON.stringify(current));\n  }\n\n  static clearCurrent() {\n    localStorage.removeItem(currentKey);\n  }\n  \n  static clear(){\n    localStorage.removeItem(worksKey);\n    localStorage.removeItem(currentKey);\n  }\n}\n\n\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Alert, Button, Container, Form, Row, Table } from 'react-bootstrap';\nimport Work  from './Work';\nimport moment from 'moment';\nimport Storage from './Storage';\n\nfunction App() {\n\n  const [work, setWork]  = useState(new Work());\n  const [works, setWorks] = useState<Work[]>([]);\n  const [status, setStatus] = useState('not_start');\n  const [errorMsg, setErrorMsg] = useState('');\n\n  useEffect(()=>{\n    const ws = Storage.getWorks();\n    setWorks(ws);\n    const cu = Storage.getCurrent();\n    setWork(cu);\n  },[])\n\n  const start = ()=> {\n    const current = work.clone();\n    current.start = new Date().getTime();\n    setWork(current);\n    setStatus('started');\n  }\n\n  const end = ()=> {\n    if(work.comment.length === 0){\n      setErrorMsg('comment is required');\n      return;\n    }else {\n      setErrorMsg('');\n    }\n    const current = work.clone();\n    current.end = new Date().getTime();\n    const newWorks = [...works, current];\n    setWorks(newWorks);\n    Storage.saveWorks(newWorks);\n    setWork(new Work());\n    Storage.clearCurrent();\n    setStatus('not_start');\n  }\n\n  const endStart = ()=> {\n    if(work.comment.length === 0){\n      setErrorMsg('comment is required');\n      return;\n    } else {\n      setErrorMsg('');\n    } \n    const current = work.clone();\n    current.end = new Date().getTime();\n    const newWorks = [...works, current];\n    setWorks(newWorks);\n    Storage.saveWorks(newWorks);\n    Storage.clearCurrent();\n    const newWork = new Work();\n    newWork.start = new Date().getTime();\n    setWork(newWork);\n    setStatus('started');\n    \n  }\n\n  const clear = () => {\n    if(!window.confirm('All clear')){\n      return;\n    }\n    Storage.clear();\n    setWorks([]);\n    setWork(new Work());\n  }\n\n  const removeRow = (index:number) => {\n    works.splice(index, 1);\n    const newWorks = [...works];\n    setWorks(newWorks);\n    Storage.saveWorks(newWorks);\n    \n  }\n  \n\n  const changeComment = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const current = work.clone();\n    current.comment = e.target.value;\n    setWork(current);\n    Storage.saveCurrent(current);\n  }\n\n  const formatTime = (timestamp:number) =>{\n    if( timestamp > 0) {\n      return moment(timestamp).format('HH:mm')\n    }\n    return '';\n  }\n\n\n  const renderButton = () => {\n    if(status === 'not_start'){\n      return (\n        <Button onClick={start}>Start</Button> \n      )\n    } else {\n      return (\n        <div>\n          <Button onClick={end}>End</Button>\n          <Button onClick={endStart}>End&Start</Button>\n        </div>\n      )\n    }\n  }\n\n\n  const renderList = ()=>{\n    const list:JSX.Element[] = [];\n    works.forEach((w,index)=>{\n      list.push(\n        <tr key={index}>\n          <td>{w.comment}</td>\n          <td>{ Math.round((w.end - w.start)/(60.0*60*1000)*100)/100}</td>\n          <td>{formatTime(w.start)} - {formatTime(w.end)}</td> \n          <td><Button onClick={()=>{removeRow(index)}}>Remove</Button></td>\n        </tr>\n      )\n    })\n    return(\n      <Table striped bordered>\n        <tbody>\n          {list}\n        </tbody>\n      </Table>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <Container>\n          <Row>\n            {errorMsg.length > 0 &&\n            <Alert variant={'danger'}>\n              {errorMsg}\n            </Alert>\n            }\n          </Row>\n          <Row>\n            {renderButton()}\n          </Row>\n          <Row>\n              <Form.Control onChange={changeComment} value={work.comment}></Form.Control>\n          </Row>\n          <Row>\n          {work.comment} {formatTime(work.start)} - {formatTime(work.end)}\n          </Row>\n          <Row>\n            {renderList()}\n          </Row>\n          <Row>\n            <Button onClick={clear}>Clear</Button>\n          </Row>\n        </Container>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}